name: KRX Daily Data Collector

on:
  schedule:
    # 매일 18:10 KST == 09:10 UTC (월~금)
    - cron: "10 9 * * 1-5"
  workflow_dispatch:
    inputs:
      run_on_holiday:
        description: "휴장일에도 마지막 영업일 데이터로 실행"
        type: boolean
        default: true

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      RUN_ON_HOLIDAY: ${{ inputs.run_on_holiday || 'true' }}
      PYTHONUNBUFFERED: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Collect / Update KRX data
        run: |
          python -m src.update_stock_data --run-on-holiday "${RUN_ON_HOLIDAY}"

      - name: Build per-ticker JSON + manifest (docs/api)
        env:
          ROWS_LIMIT: ""   # 필요 시 최근 N행만 포함 (전체 원하면 비우거나 삭제)
        run: |
          python - <<'PY'
          import json, re, os
          from pathlib import Path
          from datetime import datetime, timezone, timedelta
          import pandas as pd

          KST = timezone(timedelta(hours=9))
          data_dir = Path("data")
          api_dir = Path("docs/api")
          api_dir.mkdir(parents=True, exist_ok=True)

          # 새 파일명 규칙: <이름>_<6자리티커>_stock_data.csv
          pat = re.compile(r"^(?P<name>.+?)_(?P<ticker>\d{6})_stock_data\.csv$")

          # 매니페스트(v2)
          manifest = {
            "version": 2,
            "generated_at": datetime.now(tz=KST).strftime("%Y-%m-%dT%H:%M:%S%z"),
            "timezone": "Asia/Seoul",
            "items": []
          }

          rows_limit = os.environ.get("ROWS_LIMIT")
          rows_limit = None if not rows_limit or rows_limit.lower() in ("none","","0") else int(rows_limit)

          count = 0
          for path in sorted(data_dir.glob("*_stock_data.csv")):
            m = pat.match(path.name)
            if not m:
              # 티커 없는 구규칙 파일은 스킵 (필요하면 별도 매핑 추가 가능)
              continue
            name = m.group("name")
            ticker = m.group("ticker")

            try:
              df = pd.read_csv(path, encoding="utf-8-sig")
            except Exception:
              df = pd.read_csv(path)

            if rows_limit:
              df = df.head(rows_limit)

            item = {
              "name": name,
              "ticker": ticker,
              "columns": [str(c) for c in df.columns],
              "rows": df.astype(str).values.tolist(),
              "row_count": int(len(df)),
            }

            out_file = api_dir / f"{name}_{ticker}.json"
            out_file.write_text(json.dumps(item, ensure_ascii=False, separators=(",", ":")), encoding="utf-8")

            manifest["items"].append({
              "name": name,
              "ticker": ticker,
              "row_count": item["row_count"],
              "json_url": f"./{name}_{ticker}.json"
            })
            count += 1

          # 매니페스트 저장
          (api_dir / "index.json").write_text(json.dumps(manifest, ensure_ascii=False, separators=(",", ":")), encoding="utf-8")

          print(f"[OK] wrote {count} per-ticker JSON files and manifest: {api_dir/'index.json'} (items={len(manifest['items'])})")
          PY

      - name: Commit & Push changes (if any)
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A data docs/api/*.json || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore(api): update per-ticker JSON & manifest [skip ci]"
            git push
          fi
